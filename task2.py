# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlyIZ169MOfgK8_KnDjTGIIC3VbUsZqu
"""

# TODO: pin transformers version
!pip install -q git+https://github.com/huggingface/transformers.git
!pip install -q bitsandbytes==0.41.3 accelerate==0.25.0

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_excel('/content/drive/MyDrive/Adobe/content_simulation_train.xlsx')

!pip install swifter

def extract_link(x):
    match_ = re.search(r"previewUrl='(.*?)'|thumbnailUrl='(.*?)'", x)
    if match_:
        return match_.group(1) or match_.group(2)
    else:
        return "URL not found."

import swifter
import re
df['extracted_links'] = df['media'].swifter.apply(extract_link)

import requests
from PIL import Image
import pandas as pd

# Assuming df is your DataFrame containing the 'image' column
# Fetching the first row's 'image' value
first_image_url = df['extracted_links'].iloc[1050]



image_url = first_image_url
image = Image.open(requests.get(image_url, stream=True).raw)
image

import torch
from transformers import BitsAndBytesConfig

quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16
)

"""## Load the model using `pipeline`

We will leverage the `image-to-text` pipeline from transformers !
"""

from transformers import pipeline

model_id = "llava-hf/llava-1.5-7b-hf"

pipe = pipeline("image-to-text", model=model_id, model_kwargs={"quantization_config": quantization_config})

import re
examples = [
    ["image: df['extracted_links].iloc[0]", "Date: 2020-12-12 00:47:00, brand_name: tim hortons, username: TimHortonsPH, likes: 1", "outputs: Spend your weekend morning with a Ham, Egg, and Cheese Wrap paired with a sweet Iced French Vanilla! ☀️ Order yours now via dine-in, takeout, and delivery. #TimHortonsPH <hyperlink>"],
    ["image: df['extracted_links].iloc[13]", "Date: 2018-08-17 13:00:18, brand_name: pfizer, username: Pfizer_UK, likes: 2","outputs:#DYK whilst #TickBorneEncephalitis is not found in the UK, it can occur in many popular holiday destinations in Europe. Find out more: <hyperlink> #TickAlert #TravelBug <hyperlink>"]]
prompt_examples = "\n".join([f"{example}" for example in examples])
arr = []
def tweet(link, brand, username, likes,date,arr):
    first_image_url = link

    try:
        # Attempt to load the image from the URL
        image = Image.open(requests.get(first_image_url, stream=True).raw)
    except Exception as e:
        print(f"Error loading image from {first_image_url}: {e}")
        return "Image not loaded"

    brand_name = brand
    username = username
    likes = likes
    date = date
    prompt2 = f"USER: <image>\nCreate an engaging tweet caption for this image that aligns with {brand_name} style. Do consider the other name {username} . the date of the tweet is {date} , see if there is anything special on this day. Identify the place and text in the image. Also identify the objects in the image. Craft it to gather {likes} likes. Avoid direct brand mentions or like counts in the output. Incorporate relevant hashtags for maximum engagement."
    prompt = f"USER: <image>\nGenerate a tweet caption for this specific image that has brand name = {brand_name}, make a marketing tweet text in a way that it receives {likes} likes.the date of the tweet is {date}. Do not print the brand name and likes, and also provide hashtags."


    outputs = pipe(image, prompt=prompt, generate_kwargs={"max_new_tokens": 200})
    text = outputs[0]['generated_text']
    original_string = text
    sentence_to_remove = "USER:this is the input image:  \nCreate a compelling tweet caption for the image featuring the brand \'pepsico\' and has twitter username \'PepsiCoAMESA\'. identify the text in the image and Craft a tweet such a way to get \'1\' likes. Avoid mentioning the likes explicitly. Include relevant hashtags to enhance visibility and appeal. Be creative and engaging in your description. Also try identifying the place in the image and also the objects present in the image. mention the place in the image. Do mention the username . Give one liner text only. \n\n"
    result_string = original_string.replace(sentence_to_remove, "")
    print(result_string)
    arr.append(result_string)
    arr_1 = pd.DataFrame(arr)
    file_path = 't291.csv'
    arr_1.to_csv(file_path, index=False, encoding='utf-8')
    return arr




def build(df):
    length = len(df)
    df_re = pd.read_csv('/content/t291.csv',encoding='utf-8')
    #arr_1.to_csv(file_path, index=False, encoding='utf-8')
    arr = df_re.iloc[:,0].tolist()
    for i in range(length):
        arr = tweet(df['extracted_links'].iloc[i],df['inferred company'].iloc[i],df['username'].iloc[i],df['likes'].iloc[i],df['date'].iloc[i],arr)
        print(i)

build(df.iloc[0:10])

Gen_data_csv= pd.read_csv('/content/t291.csv')

Gen_data_csv.tail(2)

str(Gen_data_csv.iloc[0,0])

match_txt = re.search(r'"([^"]*)"', str(Gen_data_csv.iloc[0,0]))
print(match_txt)

if match_txt:
    extracted_text = match_txt.group(1)
    print(extracted_text)
else:
    print("No text within double quotes found.")

import re
#import wikitextparser as wtp

def extract_text(input_string):
    match_txt = re.search(r'"([^"]*)"', str(input_string))

    if match_txt:
        extracted_text = match_txt.group(1)
        extracted_text_with_hyperlink = re.sub(r'#(\w+)', r'#\1 <hyperlink>', extracted_text)

        return extracted_text_with_hyperlink
    else:
        return "No text within double quotes found."

len(Gen_data_csv)

for i in range(len(Gen_data_csv)):
  Gen_data_csv_value = str(Gen_data_csv.iloc[3,0])

result = extract_text(Gen_data_csv_value)

Gen_data_csv_value = str(Gen_data_csv.iloc[3,0])

result = extract_text(Gen_data_csv_value)

result

# Assuming `Gen_data_csv` is your DataFrame
data_df = pd.DataFrame(columns=["Index", "Processed_Text"])

for i in range(len(Gen_data_csv)):
    Gen_data_csv_value = str(Gen_data_csv.iloc[i, 0])
    processed_text = extract_text(Gen_data_csv_value)

    # Append data to the DataFrame
    data_df = data_df.append({
        "Index": i,
        "Processed_Text": processed_text
    }, ignore_index=True)

# Save the DataFrame to a CSV file
data_df.to_excel("content_simulation_test_time_Results.xlsx", index=False)